basePath: /
definitions:
  controllers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controllers.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  controllers.TokenResponse:
    properties:
      token:
        type: string
    type: object
  controllers.UserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  controllers.UserRequestBooking:
    properties:
      end_time:
        type: string
      start_time:
        type: string
    type: object
  controllers.UserResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.Booking:
    properties:
      end_time:
        type: string
      id:
        type: integer
      start_time:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.User:
    properties:
      created_at:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a booking API server.
  title: Booking API
  version: "1.0"
paths:
  /bookings:
    get:
      consumes:
      - application/json
      description: Get all bookings
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Booking'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: List bookings
      tags:
      - bookings
    post:
      consumes:
      - application/json
      description: Create a new booking. Use JWT token in headers.
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Booking object
        in: body
        name: booking
        required: true
        schema:
          $ref: '#/definitions/controllers.UserRequestBooking'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Booking'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Create a booking
      tags:
      - bookings
  /bookings/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a booking by ID
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Booking ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Delete a booking
      tags:
      - bookings
  /login:
    post:
      consumes:
      - application/json
      description: Login a user with username and password and return JWT token
      parameters:
      - description: User object with username and password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Login a user
      tags:
      - users
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with username and password
      parameters:
      - description: User object with username and password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Register a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.TokenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Delete a user
      tags:
      - users
swagger: "2.0"
